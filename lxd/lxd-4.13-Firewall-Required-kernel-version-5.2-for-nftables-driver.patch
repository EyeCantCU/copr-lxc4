From 5118984d3d4b1a03e0867314d3eeb5f159387fdb Mon Sep 17 00:00:00 2001
From: Thomas Parrott <thomas.parrott@canonical.com>
Date: Thu, 29 Apr 2021 10:33:00 +0100
Subject: [PATCH] lxd/firewall/drivers/drivers/nftables: Require kernel version
 >= 5.2 to allow support for inet table NAT rules

Fixes #8724

Signed-off-by: Thomas Parrott <thomas.parrott@canonical.com>
---
 lxd/firewall/drivers/drivers_nftables.go | 32 +++++++++++++++++++-----
 1 file changed, 26 insertions(+), 6 deletions(-)

diff --git a/lxd/firewall/drivers/drivers_nftables.go b/lxd/firewall/drivers/drivers_nftables.go
index 0076349180..68d6a1aa91 100644
--- a/lxd/firewall/drivers/drivers_nftables.go
+++ b/lxd/firewall/drivers/drivers_nftables.go
@@ -48,15 +48,35 @@ func (d Nftables) Compat() (bool, error) {
 		return false, err
 	}
 
-	// We require a 5.x kernel to avoid weird conflicts with xtables.
-	if len(uname.Release) > 1 {
-		verInt, err := strconv.Atoi(uname.Release[0:1])
+	// We require a >= 5.2 kernel to avoid weird conflicts with xtables and support for inet table NAT rules.
+	releaseLen := len(uname.Release)
+	if releaseLen > 1 {
+		verErr := fmt.Errorf("Kernel version does not meet minimum requirement of 5.2")
+		releaseParts := strings.SplitN(uname.Release, ".", 3)
+		if len(releaseParts) < 2 {
+			return false, errors.Wrapf(err, "Failed parsing kernel version number into parts")
+		}
+
+		majorVer := releaseParts[0]
+		majorVerInt, err := strconv.Atoi(majorVer)
 		if err != nil {
-			return false, errors.Wrapf(err, "Failed parsing kernel version")
+			return false, errors.Wrapf(err, "Failed parsing kernel major version number %q", majorVer)
+		}
+
+		if majorVerInt < 5 {
+			return false, verErr
 		}
 
-		if verInt < 5 {
-			return false, fmt.Errorf("Kernel version does not meet minimum requirement of 5")
+		if majorVerInt == 5 {
+			minorVer := releaseParts[1]
+			minorVerInt, err := strconv.Atoi(minorVer)
+			if err != nil {
+				return false, errors.Wrapf(err, "Failed parsing kernel minor version number %q", minorVer)
+			}
+
+			if minorVerInt < 2 {
+				return false, verErr
+			}
 		}
 	}
 
