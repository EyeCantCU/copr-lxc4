From afd78d7086d51c8f47f0588f921e3418e728260a Mon Sep 17 00:00:00 2001
From: Mark Laing <mark.laing@canonical.com>
Date: Fri, 7 Jan 2022 17:26:25 +0000
Subject: [PATCH] lxd/db/cluster: Fixes v19 migration for sqlite 3.37.

SQLite 3.37 introduced a change in which the CHECK constraint is checked
immediately when adding a new column. Since the default value of the
arch is not allowed under the check constraint, this operation fails.
This change turns on the ignore_check_constraints pragma before applying
the changes.

Signed-off-by: Mark Laing <mark.laing@canonical.com>
---
 lxd/db/cluster/update.go | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/lxd/db/cluster/update.go b/lxd/db/cluster/update.go
index 1b586478af3..66c3bc11569 100644
--- a/lxd/db/cluster/update.go
+++ b/lxd/db/cluster/update.go
@@ -2421,11 +2421,18 @@ INSERT INTO images_profiles (image_id, profile_id)
 
 // Add a new "arch" column to the "nodes" table.
 func updateFromV19(tx *sql.Tx) error {
+	_, err := tx.Exec("PRAGMA ignore_check_constraints=on")
+	if err != nil {
+		return err
+	}
+
+	defer tx.Exec("PRAGMA ignore_check_constraints=off")
+
 	// The column has a not-null constraint and a default value of
 	// 0. However, leaving the 0 default won't effectively be accepted when
 	// creating a new, due to the check constraint, so we are sure to end
 	// up with a valid value.
-	_, err := tx.Exec("ALTER TABLE nodes ADD COLUMN arch INTEGER NOT NULL DEFAULT 0 CHECK (arch > 0)")
+	_, err = tx.Exec("ALTER TABLE nodes ADD COLUMN arch INTEGER NOT NULL DEFAULT 0 CHECK (arch > 0)")
 	if err != nil {
 		return err
 	}
@@ -2437,6 +2444,7 @@ func updateFromV19(tx *sql.Tx) error {
 	if err != nil {
 		return err
 	}
+
 	return nil
 }
 
