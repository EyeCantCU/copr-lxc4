From 703b4ac0fd6831e542bb0852c1c63e1896220427 Mon Sep 17 00:00:00 2001
From: Thomas Parrott <thomas.parrott@canonical.com>
Date: Mon, 27 Feb 2023 08:17:54 +0000
Subject: [PATCH] lxd/storage/s3/types: Adds ErrorInvalidRequest constant

Signed-off-by: Thomas Parrott <thomas.parrott@canonical.com>
---
 lxd/storage/s3/types.go | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/lxd/storage/s3/types.go b/lxd/storage/s3/types.go
index 3efa9df53b27..4a038974cb1e 100644
--- a/lxd/storage/s3/types.go
+++ b/lxd/storage/s3/types.go
@@ -15,10 +15,14 @@ const ErrorCodeInternalError = "InternalError"
 // ErrorCodeInvalidAccessKeyID means there was an invalid access key provided.
 const ErrorCodeInvalidAccessKeyID = "InvalidAccessKeyId"
 
+// ErrorInvalidRequest means there was an invalid request.
+const ErrorInvalidRequest = "InvalidRequest"
+
 var errorHTTPStatusCodes = map[string]int{
 	ErrorCodeNoSuchBucket:       http.StatusNotFound,
 	ErrorCodeInternalError:      http.StatusInternalServerError,
 	ErrorCodeInvalidAccessKeyID: http.StatusForbidden,
+	ErrorInvalidRequest:         http.StatusBadRequest,
 }
 
 // Error S3 error response.
From ee58c300ede47d123560acda2ec7f99300f78757 Mon Sep 17 00:00:00 2001
From: Thomas Parrott <thomas.parrott@canonical.com>
Date: Mon, 27 Feb 2023 08:18:14 +0000
Subject: [PATCH] lxd/api: Fixes storageBucketsServer to parse URL to properly
 extract bucket name from path

Fixes #11410

Signed-off-by: Thomas Parrott <thomas.parrott@canonical.com>
---
 lxd/api.go | 17 ++++++++++++++++-
 1 file changed, 16 insertions(+), 1 deletion(-)

diff --git a/lxd/api.go b/lxd/api.go
index 9671d974784c..e12422ab0af6 100644
--- a/lxd/api.go
+++ b/lxd/api.go
@@ -247,7 +247,22 @@ func storageBucketsServer(d *Daemon) *http.Server {
 
 		s := d.State()
 
-		pathParts := strings.Split(r.RequestURI, "/")
+		reqURL, err := url.Parse(r.RequestURI)
+		if err != nil {
+			errResult := s3.Error{Code: s3.ErrorInvalidRequest, Message: err.Error()}
+			errResult.Response(w)
+
+			return
+		}
+
+		pathParts := strings.Split(reqURL.Path, "/")
+		if len(pathParts) < 2 {
+			errResult := s3.Error{Code: s3.ErrorInvalidRequest, Message: "Bucket name not specified"}
+			errResult.Response(w)
+
+			return
+		}
+
 		bucketName, err := url.PathUnescape(pathParts[1])
 		if err != nil {
 			errResult := s3.Error{Code: s3.ErrorCodeNoSuchBucket, BucketName: pathParts[1]}
