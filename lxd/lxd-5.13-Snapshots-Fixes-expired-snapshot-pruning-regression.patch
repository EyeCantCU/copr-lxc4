From cbcc0585515d7d78dc813007d50e9decdf2544c2 Mon Sep 17 00:00:00 2001
From: Thomas Parrott <thomas.parrott@canonical.com>
Date: Tue, 25 Apr 2023 09:31:28 +0100
Subject: [PATCH] lxd/db/snapshots: Delete expired snapshots when expiry time
 is reached rather than exceeded

Signed-off-by: Thomas Parrott <thomas.parrott@canonical.com>
---
 lxd/db/snapshots.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/lxd/db/snapshots.go b/lxd/db/snapshots.go
index f94635616d10..96de383fd4e3 100644
--- a/lxd/db/snapshots.go
+++ b/lxd/db/snapshots.go
@@ -63,7 +63,7 @@ func (c *ClusterTx) GetLocalExpiredInstanceSnapshots(ctx context.Context) ([]clu
 			return nil
 		}
 
-		if time.Now().Unix()-expiry.Time.Unix() < 0 {
+		if time.Now().Before(expiry.Time) {
 			return nil
 		}
 
From 36e8138efbec3c3fa5368f49c880143a5df28123 Mon Sep 17 00:00:00 2001
From: Thomas Parrott <thomas.parrott@canonical.com>
Date: Tue, 25 Apr 2023 12:38:43 +0100
Subject: [PATCH] lxd/instance: Fix expired snapshot pruning when no new
 snapshots being created in autoCreateAndPruneExpiredInstanceSnapshotsTask

Fixes regression from ab7d5c5182d8a120462331133f6e5b1006f391fc
Fixes #11599

Signed-off-by: Thomas Parrott <thomas.parrott@canonical.com>
---
 lxd/instance.go | 69 +++++++++++++++++++++++--------------------------
 1 file changed, 32 insertions(+), 37 deletions(-)

diff --git a/lxd/instance.go b/lxd/instance.go
index a15f9bae782d..298c73e56c5d 100644
--- a/lxd/instance.go
+++ b/lxd/instance.go
@@ -549,30 +549,28 @@ func autoCreateAndPruneExpiredInstanceSnapshotsTask(d *Daemon) (task.Func, task.
 			instances = append(instances, inst)
 		}
 
-		if len(instances) == 0 {
-			return
-		}
+		if len(instances) > 0 {
+			opRun := func(op *operations.Operation) error {
+				return autoCreateInstanceSnapshots(ctx, d, instances)
+			}
 
-		opRun := func(op *operations.Operation) error {
-			return autoCreateInstanceSnapshots(ctx, d, instances)
-		}
+			op, err := operations.OperationCreate(s, "", operations.OperationClassTask, operationtype.SnapshotCreate, nil, nil, opRun, nil, nil, nil)
+			if err != nil {
+				logger.Error("Failed to start create snapshot operation", logger.Ctx{"err": err})
+				return
+			}
 
-		op, err := operations.OperationCreate(s, "", operations.OperationClassTask, operationtype.SnapshotCreate, nil, nil, opRun, nil, nil, nil)
-		if err != nil {
-			logger.Error("Failed to start create snapshot operation", logger.Ctx{"err": err})
-			return
-		}
+			logger.Info("Creating scheduled instance snapshots")
 
-		logger.Info("Creating scheduled instance snapshots")
+			err = op.Start()
+			if err != nil {
+				logger.Error("Failed creating scheduled instance snapshots", logger.Ctx{"err": err})
+			}
 
-		err = op.Start()
-		if err != nil {
-			logger.Error("Failed creating scheduled instance snapshots", logger.Ctx{"err": err})
+			_, _ = op.Wait(ctx)
+			logger.Info("Done creating scheduled instance snapshots")
 		}
 
-		_, _ = op.Wait(ctx)
-		logger.Info("Done creating scheduled instance snapshots")
-
 		// Once the new instance snapshots have been created, prune the expired ones.
 		var expiredSnapshotInstances []instance.Instance
 
@@ -644,30 +642,27 @@ func autoCreateAndPruneExpiredInstanceSnapshotsTask(d *Daemon) (task.Func, task.
 			return
 		}
 
-		// Skip if no expired snapshots.
-		if len(expiredSnapshotInstances) == 0 {
-			return
-		}
+		if len(expiredSnapshotInstances) > 0 {
+			opRun := func(op *operations.Operation) error {
+				return pruneExpiredInstanceSnapshots(ctx, d, expiredSnapshotInstances)
+			}
 
-		opRun = func(op *operations.Operation) error {
-			return pruneExpiredInstanceSnapshots(ctx, d, expiredSnapshotInstances)
-		}
+			op, err := operations.OperationCreate(d.State(), "", operations.OperationClassTask, operationtype.SnapshotsExpire, nil, nil, opRun, nil, nil, nil)
+			if err != nil {
+				logger.Error("Failed to start expired instance snapshots operation", logger.Ctx{"err": err})
+				return
+			}
 
-		op, err = operations.OperationCreate(d.State(), "", operations.OperationClassTask, operationtype.SnapshotsExpire, nil, nil, opRun, nil, nil, nil)
-		if err != nil {
-			logger.Error("Failed to start expired instance snapshots operation", logger.Ctx{"err": err})
-			return
-		}
+			logger.Info("Pruning expired instance snapshots")
 
-		logger.Info("Pruning expired instance snapshots")
+			err = op.Start()
+			if err != nil {
+				logger.Error("Failed to remove expired instance snapshots", logger.Ctx{"err": err})
+			}
 
-		err = op.Start()
-		if err != nil {
-			logger.Error("Failed to remove expired instance snapshots", logger.Ctx{"err": err})
+			_, _ = op.Wait(ctx)
+			logger.Info("Done pruning expired instance snapshots")
 		}
-
-		_, _ = op.Wait(ctx)
-		logger.Info("Done pruning expired instance snapshots")
 	}
 
 	first := true
