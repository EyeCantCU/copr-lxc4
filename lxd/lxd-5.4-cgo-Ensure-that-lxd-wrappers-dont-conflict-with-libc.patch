From d83f061a21f509d42b7a334b97403d2a019a7b52 Mon Sep 17 00:00:00 2001
From: Christian Brauner <brauner@kernel.org>
Date: Tue, 9 Aug 2022 12:02:58 +0200
Subject: [PATCH] cgo: ensure that lxd wrappers don't conflict with libc
 provided wrapper

Fixes: #10738
Signed-off-by: Christian Brauner (Microsoft) <brauner@kernel.org>
---
 lxd/include/process_utils.h    |  8 ++++----
 lxd/include/syscall_wrappers.h | 11 ++++++-----
 lxd/main_checkfeature.go       |  8 ++++----
 lxd/main_forkmount.go          |  2 +-
 lxd/main_forksyscall.go        |  2 +-
 lxd/main_nsexec.go             |  6 +++---
 lxd/seccomp/seccomp.go         |  2 +-
 shared/idmap/shift_linux.go    |  4 ++--
 shared/util_linux_cgo.go       |  4 ++--
 9 files changed, 24 insertions(+), 23 deletions(-)

diff --git a/lxd/include/process_utils.h b/lxd/include/process_utils.h
index da6774a7ebac..2544aea80132 100644
--- a/lxd/include/process_utils.h
+++ b/lxd/include/process_utils.h
@@ -18,20 +18,20 @@
 #include "memory_utils.h"
 #include "syscall_numbers.h"
 
-static inline int pidfd_open(pid_t pid, unsigned int flags)
+static inline int lxd_pidfd_open(pid_t pid, unsigned int flags)
 {
 	return syscall(__NR_pidfd_open, pid, flags);
 }
 
-static inline int pidfd_send_signal(int pidfd, int sig, siginfo_t *info,
-				    unsigned int flags)
+static inline int lxd_pidfd_send_signal(int pidfd, int sig, siginfo_t *info,
+					unsigned int flags)
 {
 	return syscall(__NR_pidfd_send_signal, pidfd, sig, info, flags);
 }
 
 static inline bool process_still_alive(int pidfd)
 {
-	return pidfd_send_signal(pidfd, 0, NULL, 0) == 0;
+	return lxd_pidfd_send_signal(pidfd, 0, NULL, 0) == 0;
 }
 
 static inline int wait_for_pid(pid_t pid)
diff --git a/lxd/include/syscall_wrappers.h b/lxd/include/syscall_wrappers.h
index 0802352d97f7..d05604b4b25e 100644
--- a/lxd/include/syscall_wrappers.h
+++ b/lxd/include/syscall_wrappers.h
@@ -27,7 +27,7 @@ static inline int lxd_close_range(unsigned int fd, unsigned int max_fd, unsigned
 	return syscall(__NR_close_range, fd, max_fd, flags);
 }
 
-static inline int open_tree(int dfd, const char *filename, unsigned int flags)
+static inline int lxd_open_tree(int dfd, const char *filename, unsigned int flags)
 {
 	return syscall(__NR_open_tree, dfd, filename, flags);
 }
@@ -42,14 +42,15 @@ struct lxc_mount_attr {
 	__u64 userns_fd;
 };
 
-static inline int mount_setattr(int dfd, const char *path, unsigned int flags,
-				struct lxc_mount_attr *attr, size_t size)
+static inline int lxd_mount_setattr(int dfd, const char *path, unsigned int flags,
+				    struct lxc_mount_attr *attr, size_t size)
 {
 	return syscall(__NR_mount_setattr, dfd, path, flags, attr, size);
 }
 
-static inline int move_mount(int from_dfd, const char *from_pathname, int to_dfd,
-			     const char *to_pathname, unsigned int flags)
+static inline int lxd_move_mount(int from_dfd, const char *from_pathname,
+				 int to_dfd, const char *to_pathname,
+				 unsigned int flags)
 {
 	return syscall(__NR_move_mount, from_dfd, from_pathname, to_dfd,
 		       to_pathname, flags);
diff --git a/lxd/main_checkfeature.go b/lxd/main_checkfeature.go
index d84bb7e4be40..56ebee1a79fc 100644
--- a/lxd/main_checkfeature.go
+++ b/lxd/main_checkfeature.go
@@ -432,7 +432,7 @@ static int is_pidfd_aware(void)
 	__do_close int pidfd = -EBADF;
 	int ret;
 
-	pidfd = pidfd_open(getpid(), 0);
+	pidfd = lxd_pidfd_open(getpid(), 0);
 	if (pidfd < 0)
 		return -EBADF;
 
@@ -448,7 +448,7 @@ static int is_pidfd_aware(void)
 	if (ret < 0 && errno != ECHILD)
 		return -errno;
 
-	ret = pidfd_send_signal(pidfd, 0, NULL, 0);
+	ret = lxd_pidfd_send_signal(pidfd, 0, NULL, 0);
 	if (ret)
 		return -errno;
 
@@ -569,7 +569,7 @@ static bool kernel_supports_idmapped_mounts(void)
 	};
 	int ret;
 
-	fd_tree = open_tree(-EBADF, "/", OPEN_TREE_CLONE | OPEN_TREE_CLOEXEC);
+	fd_tree = lxd_open_tree(-EBADF, "/", OPEN_TREE_CLONE | OPEN_TREE_CLOEXEC);
 	if (fd_tree < 0)
 		return false;
 
@@ -580,7 +580,7 @@ static bool kernel_supports_idmapped_mounts(void)
 	// If the kernel supports idmapped mounts at all we will get a EBADF
 	// for trying to create one from an invalid O_PATH fd.
 	attr.userns_fd = fd_devnull;
-	ret = mount_setattr(fd_tree, "", AT_EMPTY_PATH, &attr, sizeof(attr));
+	ret = lxd_mount_setattr(fd_tree, "", AT_EMPTY_PATH, &attr, sizeof(attr));
 	if (ret && (errno == EBADF))
 		return true;
 
diff --git a/lxd/main_forkmount.go b/lxd/main_forkmount.go
index 1d3eedc756ab..e26d19c9ed9f 100644
--- a/lxd/main_forkmount.go
+++ b/lxd/main_forkmount.go
@@ -222,7 +222,7 @@ static void do_lxd_forkmount(int pidfd, int ns_fd)
 	}
 
 	if (fd_tree >= 0) {
-		ret = move_mount(fd_tree, "", -EBADF, dest, MOVE_MOUNT_F_EMPTY_PATH);
+		ret = lxd_move_mount(fd_tree, "", -EBADF, dest, MOVE_MOUNT_F_EMPTY_PATH);
 		if (ret) {
 			fprintf(stderr, "Failed to move detached mount to target from %d to %s: %s\n", fd_tree, dest, strerror(errno));
 			_exit(1);
diff --git a/lxd/main_forksyscall.go b/lxd/main_forksyscall.go
index 9a2fdeff910b..b225435d3a2c 100644
--- a/lxd/main_forksyscall.go
+++ b/lxd/main_forksyscall.go
@@ -481,7 +481,7 @@ static void mount_emulate(void)
 		if (!acquire_final_creds(pid, nsuid, nsgid, nsfsuid, nsfsgid))
 			die("error: failed to acquire final creds");
 
-		ret = move_mount(fd_tree, "", -EBADF, target, MOVE_MOUNT_F_EMPTY_PATH);
+		ret = lxd_move_mount(fd_tree, "", -EBADF, target, MOVE_MOUNT_F_EMPTY_PATH);
 		if (ret)
 			die("error: failed to attach detached mount");
 	} else if (strcmp(shiftfs, "shiftfs") == 0) {
diff --git a/lxd/main_nsexec.go b/lxd/main_nsexec.go
index 7d3a645fa68c..d087c51049e0 100644
--- a/lxd/main_nsexec.go
+++ b/lxd/main_nsexec.go
@@ -207,7 +207,7 @@ int pidfd_nsfd(int pidfd, pid_t pid)
 	if (pidfd >= 0) {
 		// Verify that the pid has not been recycled and our /proc/<pid> handle
 		// is still valid.
-		ret = pidfd_send_signal(pidfd, 0, NULL, 0);
+		ret = lxd_pidfd_send_signal(pidfd, 0, NULL, 0);
 		if (ret && errno != EPERM)
 			return -errno;
 	}
@@ -304,12 +304,12 @@ int mount_detach_idmap(const char *path, int fd_userns)
 	};
 	int ret;
 
-	fd_tree = open_tree(-EBADF, path, OPEN_TREE_CLONE | OPEN_TREE_CLOEXEC);
+	fd_tree = lxd_open_tree(-EBADF, path, OPEN_TREE_CLONE | OPEN_TREE_CLOEXEC);
 	if (fd_tree < 0)
 		return -errno;
 
 	attr.userns_fd = fd_userns;
-	ret = mount_setattr(fd_tree, "", AT_EMPTY_PATH, &attr, sizeof(attr));
+	ret = lxd_mount_setattr(fd_tree, "", AT_EMPTY_PATH, &attr, sizeof(attr));
 	if (ret < 0)
 		return -errno;
 
diff --git a/lxd/seccomp/seccomp.go b/lxd/seccomp/seccomp.go
index c8270836c5be..d512a7bd507d 100644
--- a/lxd/seccomp/seccomp.go
+++ b/lxd/seccomp/seccomp.go
@@ -336,7 +336,7 @@ static int handle_bpf_syscall(pid_t pid_target, int notify_fd, int mem_fd,
 
 	*bpf_prog_type = attr.prog_type;
 
-	pidfd = pidfd_open(tgid, 0);
+	pidfd = lxd_pidfd_open(tgid, 0);
 	if (pidfd < 0)
 		return -errno;
 
diff --git a/shared/idmap/shift_linux.go b/shared/idmap/shift_linux.go
index e26830608cf2..7ccd8d979e6e 100644
--- a/shared/idmap/shift_linux.go
+++ b/shared/idmap/shift_linux.go
@@ -318,7 +318,7 @@ static int create_detached_idmapped_mount(const char *path)
 	};
 	int ret;
 
-	fd_tree = open_tree(-EBADF, path, OPEN_TREE_CLONE | OPEN_TREE_CLOEXEC);
+	fd_tree = lxd_open_tree(-EBADF, path, OPEN_TREE_CLONE | OPEN_TREE_CLOEXEC);
 	if (fd_tree < 0)
 		return -errno;
 
@@ -328,7 +328,7 @@ static int create_detached_idmapped_mount(const char *path)
 
 	attr.userns_fd = fd_userns;
 
-	ret = mount_setattr(fd_tree, "", AT_EMPTY_PATH, &attr, sizeof(attr));
+	ret = lxd_mount_setattr(fd_tree, "", AT_EMPTY_PATH, &attr, sizeof(attr));
 	if (ret < 0)
 		return -errno;
 
diff --git a/shared/util_linux_cgo.go b/shared/util_linux_cgo.go
index 9e53a2413e62..9b3f691c8c0a 100644
--- a/shared/util_linux_cgo.go
+++ b/shared/util_linux_cgo.go
@@ -78,7 +78,7 @@ func unCloexec(fd int) error {
 }
 
 func PidFdOpen(Pid int, Flags uint32) (*os.File, error) {
-	pidFd, errno := C.pidfd_open(C.int(Pid), C.uint32_t(Flags))
+	pidFd, errno := C.lxd_pidfd_open(C.int(Pid), C.uint32_t(Flags))
 	if errno != nil {
 		return nil, errno
 	}
@@ -92,7 +92,7 @@ func PidFdOpen(Pid int, Flags uint32) (*os.File, error) {
 }
 
 func PidfdSendSignal(Pidfd int, Signal int, Flags uint32) error {
-	ret, errno := C.pidfd_send_signal(C.int(Pidfd), C.int(Signal), nil, C.uint32_t(Flags))
+	ret, errno := C.lxd_pidfd_send_signal(C.int(Pidfd), C.int(Signal), nil, C.uint32_t(Flags))
 	if ret != 0 {
 		return errno
 	}
