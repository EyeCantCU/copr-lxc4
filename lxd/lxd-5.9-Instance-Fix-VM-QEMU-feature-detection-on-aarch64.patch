commit d6a6327ac5c2a8f184df3581714555f52b60b963
Author: Thomas Parrott <thomas.parrott@canonical.com>
Date:   Wed Jan 4 15:51:51 2023 +0000

    lxd/instance/drivers/driver/qemu: Add qemuMachineType function
    
    And switch to using integer constants for config architecture logic,
    rather than string names, as easier to see where those constants are
    being used.
    
    Signed-off-by: Thomas Parrott <thomas.parrott@canonical.com>

diff --git a/lxd/instance/drivers/driver_qemu.go b/lxd/instance/drivers/driver_qemu.go
index 40516bfec..765267a84 100644
--- a/lxd/instance/drivers/driver_qemu.go
+++ b/lxd/instance/drivers/driver_qemu.go
@@ -2566,7 +2566,7 @@ func (d *qemu) deviceBootPriorities() (map[string]int, error) {
 func (d *qemu) generateQemuConfigFile(mountInfo *storagePools.MountInfo, busName string, devConfs []*deviceConfig.RunConfig, fdFiles *[]*os.File) (string, []monitorHook, error) {
 	var monHooks []monitorHook
 
-	cfg := qemuBase(&qemuBaseOpts{d.architectureName})
+	cfg := qemuBase(&qemuBaseOpts{d.Architecture()})
 
 	err := d.addCPUMemoryConfig(&cfg)
 	if err != nil {
@@ -2751,7 +2751,7 @@ func (d *qemu) generateQemuConfigFile(mountInfo *storagePools.MountInfo, busName
 			devAddr:       devAddr,
 			multifunction: multi,
 		},
-		architecture: d.architectureName,
+		architecture: d.Architecture(),
 	}
 
 	cfg = append(cfg, qemuGPU(&gpuOpts)...)
diff --git a/lxd/instance/drivers/driver_qemu_templates.go b/lxd/instance/drivers/driver_qemu_templates.go
index 87dded8ac..f94729a53 100644
--- a/lxd/instance/drivers/driver_qemu_templates.go
+++ b/lxd/instance/drivers/driver_qemu_templates.go
@@ -5,6 +5,7 @@ import (
 	"strings"
 
 	"github.com/lxc/lxd/lxd/resources"
+	"github.com/lxc/lxd/shared/osarch"
 )
 
 type cfgEntry struct {
@@ -41,26 +42,37 @@ func qemuStringifyCfg(cfg ...cfgSection) *strings.Builder {
 	return sb
 }
 
+func qemuMachineType(architecture int) string {
+	var machineType string
+
+	switch architecture {
+	case osarch.ARCH_64BIT_INTEL_X86:
+		machineType = "q35"
+	case osarch.ARCH_64BIT_ARMV8_LITTLE_ENDIAN:
+		machineType = "virt"
+	case osarch.ARCH_64BIT_POWERPC_LITTLE_ENDIAN:
+		machineType = "pseries"
+	case osarch.ARCH_64BIT_S390_BIG_ENDIAN:
+		machineType = "s390-ccw-virtio"
+	}
+
+	return machineType
+}
+
 type qemuBaseOpts struct {
-	architecture string
+	architecture int
 }
 
 func qemuBase(opts *qemuBaseOpts) []cfgSection {
-	machineType := ""
+	machineType := qemuMachineType(opts.architecture)
 	gicVersion := ""
 	capLargeDecr := ""
 
 	switch opts.architecture {
-	case "x86_64":
-		machineType = "q35"
-	case "aarch64":
-		machineType = "virt"
+	case osarch.ARCH_64BIT_ARMV8_LITTLE_ENDIAN:
 		gicVersion = "max"
-	case "ppc64le":
-		machineType = "pseries"
+	case osarch.ARCH_64BIT_POWERPC_LITTLE_ENDIAN:
 		capLargeDecr = "off"
-	case "s390x":
-		machineType = "s390-ccw-virtio"
 	}
 
 	sections := []cfgSection{{
@@ -76,7 +88,7 @@ func qemuBase(opts *qemuBaseOpts) []cfgSection {
 		},
 	}}
 
-	if opts.architecture == "x86_64" {
+	if opts.architecture == osarch.ARCH_64BIT_INTEL_X86 {
 		sections = append(sections, []cfgSection{{
 			name: "global",
 			entries: []cfgEntry{
@@ -307,13 +319,13 @@ func qemuVsock(opts *qemuVsockOpts) []cfgSection {
 
 type qemuGpuOpts struct {
 	dev          qemuDevOpts
-	architecture string
+	architecture int
 }
 
 func qemuGPU(opts *qemuGpuOpts) []cfgSection {
 	var pciName string
 
-	if opts.architecture == "x86_64" {
+	if opts.architecture == osarch.ARCH_64BIT_INTEL_X86 {
 		pciName = "virtio-vga"
 	} else {
 		pciName = "virtio-gpu-pci"
commit b9b28a25f02831f59591385f6b179c5bca5d77d4
Author: Thomas Parrott <thomas.parrott@canonical.com>
Date:   Wed Jan 4 15:57:45 2023 +0000

    lxd/instance/drivers/driver/qemu/config/test: Fix architecture tests
    
    Signed-off-by: Thomas Parrott <thomas.parrott@canonical.com>

diff --git a/lxd/instance/drivers/driver_qemu_config_test.go b/lxd/instance/drivers/driver_qemu_config_test.go
index c2a5c95dc..10fe6f723 100644
--- a/lxd/instance/drivers/driver_qemu_config_test.go
+++ b/lxd/instance/drivers/driver_qemu_config_test.go
@@ -5,6 +5,8 @@ import (
 	"regexp"
 	"strings"
 	"testing"
+
+	"github.com/lxc/lxd/shared/osarch"
 )
 
 func TestQemuConfigTemplates(t *testing.T) {
@@ -29,7 +31,7 @@ func TestQemuConfigTemplates(t *testing.T) {
 			opts     qemuBaseOpts
 			expected string
 		}{{
-			qemuBaseOpts{"x86_64"},
+			qemuBaseOpts{architecture: osarch.ARCH_64BIT_INTEL_X86},
 			`# Machine
 			[machine]
 			graphics = "off"
@@ -50,7 +52,7 @@ func TestQemuConfigTemplates(t *testing.T) {
 			[boot-opts]
 			strict = "on"`,
 		}, {
-			qemuBaseOpts{"aarch64"},
+			qemuBaseOpts{architecture: osarch.ARCH_64BIT_ARMV8_LITTLE_ENDIAN},
 			`# Machine
 			[machine]
 			graphics = "off"
@@ -62,7 +64,7 @@ func TestQemuConfigTemplates(t *testing.T) {
 			[boot-opts]
 			strict = "on"`,
 		}, {
-			qemuBaseOpts{"ppc64le"},
+			qemuBaseOpts{architecture: osarch.ARCH_64BIT_POWERPC_LITTLE_ENDIAN},
 			`# Machine
 			[machine]
 			graphics = "off"
@@ -74,7 +76,7 @@ func TestQemuConfigTemplates(t *testing.T) {
 			[boot-opts]
 			strict = "on"`,
 		}, {
-			qemuBaseOpts{"s390x"},
+			qemuBaseOpts{architecture: osarch.ARCH_64BIT_S390_BIG_ENDIAN},
 			`# Machine
 			[machine]
 			graphics = "off"
@@ -306,7 +308,7 @@ func TestQemuConfigTemplates(t *testing.T) {
 			opts     qemuGpuOpts
 			expected string
 		}{{
-			qemuGpuOpts{qemuDevOpts{"pci", "qemu_pcie3", "00.0", true}, "x86_64"},
+			qemuGpuOpts{dev: qemuDevOpts{"pci", "qemu_pcie3", "00.0", true}, architecture: osarch.ARCH_64BIT_INTEL_X86},
 			`# GPU
 			[device "qemu_gpu"]
 			driver = "virtio-vga"
@@ -314,20 +316,20 @@ func TestQemuConfigTemplates(t *testing.T) {
 			addr = "00.0"
 			multifunction = "on"`,
 		}, {
-			qemuGpuOpts{qemuDevOpts{"pci", "qemu_pci3", "00.1", false}, "otherArch"},
+			qemuGpuOpts{dev: qemuDevOpts{"pci", "qemu_pci3", "00.1", false}, architecture: osarch.ARCH_UNKNOWN},
 			`# GPU
 			[device "qemu_gpu"]
 			driver = "virtio-gpu-pci"
 			bus = "qemu_pci3"
 			addr = "00.1"`,
 		}, {
-			qemuGpuOpts{qemuDevOpts{"ccw", "devBus", "busAddr", true}, "arch"},
+			qemuGpuOpts{dev: qemuDevOpts{"ccw", "devBus", "busAddr", true}, architecture: osarch.ARCH_UNKNOWN},
 			`# GPU
 			[device "qemu_gpu"]
 			driver = "virtio-gpu-ccw"
 			multifunction = "on"`,
 		}, {
-			qemuGpuOpts{qemuDevOpts{"ccw", "devBus", "busAddr", false}, "x86_64"},
+			qemuGpuOpts{dev: qemuDevOpts{"ccw", "devBus", "busAddr", false}, architecture: osarch.ARCH_64BIT_INTEL_X86},
 			`# GPU
 			[device "qemu_gpu"]
 			driver = "virtio-gpu-ccw"`,
commit fa9f7fb37ab6393d7fc4ca8a2b2766f6b7af1e9b
Author: Thomas Parrott <thomas.parrott@canonical.com>
Date:   Wed Jan 4 15:58:17 2023 +0000

    lxd/instance/drivers/driver/qemu/config/test: Fix whitespace
    
    Signed-off-by: Thomas Parrott <thomas.parrott@canonical.com>

diff --git a/lxd/instance/drivers/driver_qemu_config_test.go b/lxd/instance/drivers/driver_qemu_config_test.go
index 10fe6f723..74c6bcef2 100644
--- a/lxd/instance/drivers/driver_qemu_config_test.go
+++ b/lxd/instance/drivers/driver_qemu_config_test.go
@@ -1503,7 +1503,7 @@ func TestQemuConfigTemplates(t *testing.T) {
 						[object "3"]
 						key4 = " value4 "
 						[object "2"]
-						key3 =   value3  
+						key3 =   value3
 						[object "3"]
 						key5 = "value5"`,
 			},
@@ -1552,7 +1552,7 @@ func TestQemuConfigTemplates(t *testing.T) {
 		[global][4]
 		key2 = "val4"
 
-		[global] 
+		[global]
 
 		[global][4]
 		[global][5]
commit 815bfdd27e0e835d29ecd4e29b721361311b127c
Author: Thomas Parrott <thomas.parrott@canonical.com>
Date:   Wed Jan 4 16:01:56 2023 +0000

    lxd/instance/drivers/driver/qemu: Adds -machine type argument to checkFeatures
    
    Fixes #11254
    
    Signed-off-by: Thomas Parrott <thomas.parrott@canonical.com>

diff --git a/lxd/instance/drivers/driver_qemu.go b/lxd/instance/drivers/driver_qemu.go
index 765267a84..4388cc3ef 100644
--- a/lxd/instance/drivers/driver_qemu.go
+++ b/lxd/instance/drivers/driver_qemu.go
@@ -6379,7 +6379,7 @@ func (d *qemu) Info() instance.Info {
 		data.Version = "unknown" // Not necessarily an error that should prevent us using driver.
 	}
 
-	data.Features, err = d.checkFeatures(qemuPath)
+	data.Features, err = d.checkFeatures(hostArch, qemuPath)
 	if err != nil {
 		logger.Errorf("Unable to run feature checks during QEMU initialization: %v", err)
 		data.Error = fmt.Errorf("QEMU failed to run feature checks")
@@ -6391,7 +6391,7 @@ func (d *qemu) Info() instance.Info {
 	return data
 }
 
-func (d *qemu) checkFeatures(qemu string) ([]string, error) {
+func (d *qemu) checkFeatures(hostArch int, qemu string) ([]string, error) {
 	pidFile, err := os.CreateTemp("", "")
 	if err != nil {
 		return nil, err
@@ -6416,6 +6416,7 @@ func (d *qemu) checkFeatures(qemu string) ([]string, error) {
 		"-pidfile", pidFile.Name(),
 		"-chardev", fmt.Sprintf("socket,id=monitor,path=%s,server=on,wait=off", monitorPath.Name()),
 		"-mon", "chardev=monitor,mode=control",
+		"-machine", qemuMachineType(hostArch),
 	}
 
 	checkFeature := exec.Cmd{
